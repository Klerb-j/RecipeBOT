#--------------------------------------------------------------------------#
import re
import requests
from datetime import datetime
from openai import OpenAI
from config import OPENAI_API_KEY, UNSPLASH_AK
from models import User, SearchHistory
#--------------------------------------------------------------------------#


def save_user_search(telegram_id, username, query):
    # –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –î–∞—Ç–∞–±–∞–∑–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ PosgreSQL (Supabase) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º ID.
    user, _ = User.get_or_create(
        telegram_id=telegram_id,
        defaults={'name': username}
    )
    # –°–æ–∑–¥–∞–µ—Ç –ò—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å —à—Ç–∞–º–ø–æ–º –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏.
    SearchHistory.create(user=user, query=query, timestamp=datetime.now())

def get_user_history(telegram_id):
    # –î–æ—Å—Ç–∞–µ—Ç –ò—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤ –¥–∞—Ç–∞–±–∞–∑–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        user = User.get(User.telegram_id == telegram_id)
        return SearchHistory.select().where(SearchHistory.user == user)
    except User.DoesNotExist:
        return []

def show_history(update, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò—Å—Ç–æ—Ä–∏—é.
    –ï—Å–ª–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /history, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ—Ä—è–¥–æ–∫ - –Ω–æ–≤—ã–µ, –ª–∏–º–∏—Ç - 5.

    :param update: –¢–µ–ª–µ–≥—Ä–∞–º –ê–ø–¥–µ–π—Ç–µ—Ä, –Ω—É–∂–µ–Ω –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param context: –¢–µ–ª–µ–≥—Ä–∞–º –ö–æ–Ω—Ç–µ–∫—Å—Ç, –Ω—É–∂–µ–Ω –¥–ª—è –æ—Å–æ–±—ã—Ö –∫–æ–º–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç –ª—é–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —Å–∞–º–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """

    # –ù–∞—Ö–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.from_user.id

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sort_order = "–Ω–æ–≤—ã–µ"
    limit = 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã /history
    if context.args:
        if context.args[0].lower() in ["—Å—Ç–∞—Ä—ã–µ", "–Ω–æ–≤—ã–µ"]:
            sort_order = context.args[0].lower()
        elif context.args[0].isdigit():
            limit = int(context.args[0])
        else:
            update.message.reply_text('<–ø–æ—Ä—è–¥–æ–∫> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ)! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏!')
            return
        if len(context.args) == 2:
            if context.args[1].isdigit():
                limit = int(context.args[1])
            else:
                update.message.reply_text('<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
                return
        elif len(context.args) > 2:
            update.message.reply_text('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å /search <–Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>.')
            return

    # –ò—â–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, —á–∏—Å—Ç–∏—Ç –µ—ë –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∏–¥–∞.
    try:
        # –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.get(User.telegram_id == user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫
        order_clause = SearchHistory.timestamp.asc() if sort_order == "—Å—Ç–∞—Ä—ã–µ" else SearchHistory.timestamp.desc()

        # –ë–µ—Ä—ë—Ç –ò—Å—Ç–æ—Ä–∏—é –∏–∑ –î–∞—Ç–∞–±–∞–∑—ã
        history = (
            SearchHistory
            .select()
            .where(SearchHistory.user == user)
            .order_by(order_clause)
            .limit(limit)
        )

        if not history:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
            return

        cleaned_history = []
        counter = 1

        # –ß–∏—Å—Ç–∏—Ç –æ—Ç —Ü–∏—Ñ—Ä –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞, –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö
        for item in history:
            cleaned_query = re.sub(r'^\s*\d+\.\s*', '', item.query, flags=re.MULTILINE)
            formatted_entry = f"{counter}. {cleaned_query} ({item.timestamp.strftime('%d.%m.%Y %H:%M')})"
            cleaned_history.append(formatted_entry)
            counter += 1

        # –°–æ–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_text = "\n".join(cleaned_history)

        update.message.reply_text(
            f"üìù –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ ({sort_order}, {limit} —à—Ç.):\n\n{history_text}"
        )

    except User.DoesNotExist:
        update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.")

def ai_search(user_input: str):
    # –ë—ë—Ä–µ—Ç –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞
    client = OpenAI(api_key=OPENAI_API_KEY)
    response = client.responses.create(
        model="gpt-4o-mini",
        input=user_input,
        store=True,
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    return response.output_text

def image_search(query: str, update):
    # Unsplash Access Key (AK) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ .env —Ñ–∞–π–ª–µ.

    per_page = 1
    url = "https://api.unsplash.com/search/photos"
    params = {"query": query,"per_page": per_page, "client_id" : UNSPLASH_AK}

    try:
        res = requests.get(url, params=params)
        res.raise_for_status()
    except Exception as exception:
        update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞! –û—à–∏–±–∫–∞: {exception} ')
        return

    data = res.json()
    return data["results"][0]["urls"]["regular"]